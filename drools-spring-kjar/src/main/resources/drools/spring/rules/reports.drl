package drools.spring.rules;
dialect  "mvel"

import ftn.sbz.cdssserver.model.Patient;
import ftn.sbz.cdssserver.model.Treatment;
import ftn.sbz.cdssserver.model.sickness.Sickness;
import ftn.sbz.cdssserver.model.medicine.Medicine;

import java.util.List;
import java.util.Set;
import java.util.HashSet;


query chronicallySickPatients()
    $p: Patient() over window:time(3s)
    $s: Sickness($name: name) over window:time(3s)
    List(size > 5) from collect (
        Treatment(patient == $p, sickness == $s, sickness.name != "Cold", sickness.name != "Fever")
        over window:time(730d)
    )
end

query addicts()
    $p: Patient() over window:time(3s)
    $treatments: List(size >= 6) from collect (
        Treatment(patient == $p, this.hasAnalgetics()) over window:time(180d)
    )
    // three different doctors prescribed analgetics
    $d: List(size >= 3) from accumulate (
        Treatment($doctor: doctor) from $treatments,
        init(Set doctorsSet = new HashSet();),
        action(doctorsSet.add($doctor);),
        result(doctorsSet)
    )
end

query weakImmunityPatients()
    $p: Patient() over window:time(3s)
    $antibioticsTreatments: List(size > 10) from collect (
        $t: Treatment(patient == $p, this.hasAntibiotics()) over window:time(365d)
    )
    $sicknessesWithAntibiotics: Set(size >= 2) from accumulate(
        Treatment($sickness: sickness) from $antibioticsTreatments,
        init(Set sicknessSet = new HashSet();),
        action(sicknessSet.add($sickness);),
        result(sicknessSet)
    )
    not (
        Treatment(patient == $p, this.hasAntibiotics() == false) over window:time(365d)
    )
end