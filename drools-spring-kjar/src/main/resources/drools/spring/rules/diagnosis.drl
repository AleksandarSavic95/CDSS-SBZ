package drools.spring.rules;
dialect  "mvel"

import ftn.sbz.cdssserver.service.RuleService;
import ftn.sbz.cdssserver.model.dto.DiagnosisDto;
import ftn.sbz.cdssserver.model.sickness.Sickness;
import ftn.sbz.cdssserver.model.sickness.Symptom;
import ftn.sbz.cdssserver.model.rules.PossibleSickness;

import java.util.List;
import java.util.Date;

rule "diagnosis of Group 1 sicknesses"
salience 50
agenda-group "diagnosis"
    when
        $symptoms: List() from collect (Symptom() over window:time(10s)) // A A A A
        // $symptoms: List() from collect (Symptom()) // F F F F F F F F

        $s: Sickness($gen: generalSymptoms, sicknessGroup == 1)
        List($numGen: size, size >= 4) from collect (
            Symptom(this memberOf $symptoms) from $gen
        )
    then
        double percentage = $numGen * 100.0 / $gen.size(); // not needed without println
        System.out.println("\nInserting " + $s.getName() + " with " + percentage + "%\n");
        insert(new PossibleSickness($s, percentage))
end

/** Get newest PossibleSicknesses and find the most probable one **/
query getDiagnosis(int groupNumber) // TODO: try sending  sicknessGroup  as parameter to this query ! Then... see below
// Then choose from one of the 3 diagnosis (most or least dangerous) and unite all 3 lists if returning a list :)
    $possibleSicknesses: List() from collect (PossibleSickness() over window:time(10s))
    $highestPercentage: Number() from accumulate (
        PossibleSickness(
            sickness.sicknessGroup == groupNumber, $percentage: percentage
        ) from $possibleSicknesses,
        max($percentage)
    )
    // TODO: better prioritizing is when selecting PossibleSickness with max percentage and max number of symptoms
    // insetad of the one who was firstly inserted, but it is easier to leave it this way :)
    $earliestDateDiagnosed: Number() from accumulate (
        PossibleSickness(
            sickness.sicknessGroup == groupNumber, percentage == $highestPercentage, $dateDiagnosed: dateDiagnosed
        ) from $possibleSicknesses,
        min($dateDiagnosed.getTime())
    )
    $D: PossibleSickness(
            sickness.sicknessGroup == groupNumber, percentage == $highestPercentage, dateDiagnosed.getTime() == $earliestDateDiagnosed
        ) from $possibleSicknesses
end

query getPossibleSicknesses()
    $possibleSicknesses: List() from collect (PossibleSickness() over window:time(10s))
end

/** ** ** ** ** ** **/
/**  G R O U P   2 **/
/** **/
rule "diagnosis of Group 2 sicknesses"
salience 40
agenda-group "diagnosis"
    when
        $symptoms: List() from collect (Symptom() over window:time(10s)) // A A A A
        // $symptoms: List() from collect (Symptom()) // F F F F F F F F
        $s: Sickness(sicknessGroup == 2, $gen: generalSymptoms)
        List(size == $gen.size) from collect (
            Symptom(this memberOf $symptoms) from $gen
        )
    then
        insert(new PossibleSickness($s, 100.0));
end
//
//rule "filter possible sicknesses from group 2"
//salience 14
//agenda-group "detect"
//    when
//        $p: PossibleSickness($s: sickness, sickness.sicknessGroup == 2)
//        not SuggestedSickness(sickness.sicknessGroup == 2)
//    then
//        insert(new SuggestedSickness($s, 1.0));
//end

// */

//  T E S T I N G   O N L Y !!!
rule "possible sicknesses"
salience 3
agenda-group "diagnosis"
when
    $possibleSicknesses: List() from collect(PossibleSickness())
    $sicknesses: List() from collect(Sickness())
then
    System.out.println("\n======= " + $possibleSicknesses.size() + " possible Sicknesses!!\n");
    System.out.println("\n======= " + $sicknesses.size() + " Sicknesses!!\n");
end

rule "recent possible sicknesses (last X minutes)"
salience 3
agenda-group "diagnosis"
when
    Date( $time: time ) from new Date()
    $possibleSicknesses: List() from collect(PossibleSickness() over window:time(10s)) // A A A A
    // $possibleSicknesses: List() from collect(PossibleSickness()) // F F F F F F F F F
    $sicknesses: List() from collect(Sickness() over window:time(10s))
then
    System.out.println("\n======= " + $possibleSicknesses.size() + " RECENT possible Sicknesses!!\n");
    System.out.println("\n======= " + $sicknesses.size() + " RECENT Sicknesses!!\n");
end

/*
$s: Sickness($gen: generalSymptoms, $spec: specificSymptoms)
        List($numGen: size) from collect(
            Symptom(this memberOf $symptoms) from $gen
        )
        List($numSpec: size) from collect(
            Symptom(this memberOf $symptoms) from $spec
        )
        eval($numGen > 0 || $numSpec > 0)
*/